Here is a simplified version of the game you described. Due to the complexity of the game, it's not possible to provide the full code in this format. However, this should give you a good starting point.

```java
import java.awt.*;
import java.util.Random;

public class GameBoard {
    private int boardSize;
    private int blockSize;
    private Snake snake;
    private Food food;
    private int speed;

    public GameBoard(int boardSize, int blockSize, String difficulty) {
        this.boardSize = boardSize;
        this.blockSize = blockSize;
        this.snake = new Snake(blockSize);
        this.food = new Food(boardSize, blockSize);
        this.speed = difficulty.equals("easy") ? 5 : 10;
    }

    public void startGame() {
        // Initialize game board, snake and food
        // Game loop
        while (true) {
            // Check if snake hits the board side or its own body
            if (snake.checkCollision(boardSize)) {
                break;
            }

            // Check if snake eats the food
            if (snake.eatFood(food)) {
                // Increase speed by 1%
                speed += speed * 0.01;
                // Grow snake
                snake.grow();
                // Generate new food
                food = new Food(boardSize, blockSize);
            }

            // Move snake
            snake.move(speed);

            // Draw game board, snake and food
            // ...

            // Handle user input to change snake's direction
            // ...
        }
    }
}

class Snake {
    private int size;
    private Point location;
    private Point direction;

    public Snake(int size) {
        this.size = size;
        this.location = new Point(0, 0);
        this.direction = new Point(0, 1);
    }

    public boolean checkCollision(int boardSize) {
        // Check if snake hits the board side or its own body
        // ...
        return false;
    }

    public boolean eatFood(Food food) {
        // Check if snake's location is the same as food's location
        return location.equals(food.getLocation());
    }

    public void grow() {
        // Increase snake's size
        size++;
    }

    public void move(int speed) {
        // Move snake according to its direction and speed
        location.translate(direction.x * speed, direction.y * speed);
    }
}

class Food {
    private Point location;

    public Food(int boardSize, int blockSize) {
        Random random = new Random();
        int x = random.nextInt(boardSize / blockSize) * blockSize;
        int y = random.nextInt(boardSize / blockSize) * blockSize;
        this.location = new Point(x, y);
    }

    public Point getLocation() {
        return location;
    }
}
```

This code does not include the graphical representation of the game, the handling of user input, and the detailed implementation of some methods. You would need to use a library such as JavaFX or Swing to create the graphical user interface, and add event listeners to handle user input. The detailed implementation of the `checkCollision` method in the `Snake` class and the game loop in the `startGame` method of the `GameBoard` class would depend on the specific rules of your game.